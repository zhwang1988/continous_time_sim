package testjava;
import testjava.GenerateMap;
import testjava.SimPerson;
import testjava.Calrep;

import java.util.ArrayList;


public class runmap {
	     
	public static void main(String[] args) {
		 
		int fp=77; //火灾地点
		GenerateMap gp=new GenerateMap();
		Integer[][] dist0 =gp.gemap();
		Integer[][] maxpeople=gp.maxcp(8,15);//得到路的宽度
		Integer[][] dist=gp.changemap(dist0,fp);//地图信息初始化
		GenerateMap gp2=new GenerateMap();
		Integer[][] dist1=gp2.changemap(dist0,fp);//地图信息初始化
		gp.Initpeople(fp); //人员初始化
		ArrayList<Integer[][]> list=gp.Fmap(dist); //计算最短路径信息，改变了dist
		//gp.GetInformation(list,dist1,fp); //计算人，车路径时间，重叠时间
//重新	   
	   
	   System.out.println("\n ----------------------------- \n");	
	   ArrayList<SimPerson> allPerson=new ArrayList<SimPerson>();
	   int count=gp.peoplelocation.length;
	   //int count=1;
	   Integer[] state=new Integer[count];
	   for (int i=0;i<count;i++){
		   int end;
		   SimPerson one=new SimPerson(gp.peoplenumber[i],gp.peoplelocation[i]);
		   allPerson.add(one);
		   end=gp.getescapepoint(list, gp.peoplelocation[i], 41, 5);
		   state[i]=1;//仿真未结束
		   allPerson.get(i).initSimPerson(list, end);
		  
		   
	   }

	   while (runmap.isRunning(state)){
		   //在此处需要得到一个初始的
		   //后期判断必须先知道每个人的路径，所有人的路径必须已经知道，需要从这一点来改变
		   //chain的长度是100
		   Calrep cp1=new Calrep();//本质上可以在一个构造函数内解决这些问题
		   ArrayList<Integer[]> allroutes=new ArrayList<Integer[]>();//初始化得到所有的chain; 而且应该只在第一步才去完成;
		   for(int i=0;i<count;i++){
		   Integer[] chain;
		   chain=gp.display_path_s2d(list, gp.peoplelocation[i], 41,5);//每个人的都可以得到
		   allroutes.add(chain);//长度和人的组数一样
			 cp1.peoplepastpath[i]=allPerson.get(i).distance;//已经经过的路径
			 cp1.peopleallpath[i]=allPerson.get(i).longpath;//接下去要走的点
			 cp1.caldist(chain, dist1, i);//当前路径上的每个点的距离信息都能够保存下来
			 cp1.calculatetime(allPerson.get(i).time*5, i);//计算每个人在这条路上的每个点的通过的时间
			 cp1.pathrepete(allPerson.get(i).nextpoint, gp.peoplenumber); //把一些重复的人选出来
			 cp1.choosepeople(maxpeople); //error
		   }
		   for (int i=0;i<count;i++){
			   //得到每个人的路径
			   //修正路径
			   //根据外面的参数来修改这个chain
			   if(state[i]==1){
				   	state[i]=allPerson.get(i).simnextstep(list,allroutes.get(i));
					 
					
					 //cp1.choosepeople(maxpeople); //挑出最先到达的人给他们重新安排路径,
					 //cp1.ChangePeoplepath(dist1,fp,allPerson.get(i).nextpoint, gp.peoplelocation);
			   }
			   
		   }
		   
		   
		  // 得到新的问题
			//计算最短路径信息，改变了dist
           //下一个路径，假设人的速度也不一样了，所以说时间也不一样了，如何判断下面的点有可能会重复？
		   //先算出来最短路径，那么下5秒8-12，那么速度就是1.6-2.4
			//需要一个函数计算下，下面他们通过这些路口的时间点，是怎么样的，假设速度是2秒，那么计算出未来重复的路径是哪些
			
			//记录重复的人和路径，所有后面到的人换路径，最大人数，存储的是后到的
			

		
				   
		   System.out.print("\n  ----");

	   }	
	}
	
	

	public static boolean isRunning(Integer[] state){
		int length=state.length;
		for(int i=0;i<length;i++){
			if (state[i]==1)
				return true;
		}
		return false;
	}
}
